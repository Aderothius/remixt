import os
import fnmatch
import subprocess

external_dir = os.path.abspath('external')
install_dir = os.path.abspath(os.path.join(os.pardir, 'bin'))

boost_version = '1.55.0'
boost_basename = 'boost_1_55_0'

boost_url = 'http://downloads.sourceforge.net/project/boost/boost/' + boost_version + '/' + boost_basename + '.tar.gz'
boost_tgz_filename = boost_basename + '.tar.gz'
boost_dir = os.path.join(external_dir, boost_basename)
boost_sentinal = os.path.join(boost_dir, 'sentinal')

if not os.path.exists(boost_sentinal):
    subprocess.check_call('wget -c ' + boost_url, shell=True)
    subprocess.check_call('tar -C ' + external_dir + ' -xzvf ' + boost_tgz_filename, shell=True)
    os.remove(boost_tgz_filename)
    with open(boost_sentinal, 'w'):
        pass

env = Environment(ENV=os.environ)

common_sources = """
    Common.cpp
    DebugCheck.cpp
""".split()

bamtools_dir = os.path.join(external_dir, 'bamtools', 'src')
bamtools_api_dir = os.path.join(bamtools_dir, 'api')
bamtools_utils_dir = os.path.join(bamtools_dir, 'utils')

def find_files(directory, pattern):
    for root, dirs, files in os.walk(directory):
        for basename in files:
            if fnmatch.fnmatch(basename, pattern):
                filename = os.path.join(root, basename)
                yield filename

bamtools_sources = []
bamtools_sources += list(find_files(bamtools_api_dir, '*.cpp'))
bamtools_sources += list(find_files(bamtools_utils_dir, '*.cpp'))
bamtools_sources = filter(lambda a: not a.endswith('win_p.cpp'), bamtools_sources)

boost_iostreams_sources = list(find_files(os.path.join(boost_dir, 'libs/iostreams/src'), '*.cpp'))
boost_serialization_sources = list(find_files(os.path.join(boost_dir, 'libs/serialization/src'), '*.cpp'))

tclap_dir = os.path.join(external_dir, 'tclap', 'include')

env.Append(CPPPATH=[external_dir, bamtools_dir, boost_dir, tclap_dir])
env.Append(LIBS=['z', 'bz2'])
env.Append(CCFLAGS='-O3')
env.Append(CCFLAGS='-g')

sources = """
    bamconcordantreads.cpp
""".split()
env.Program(target='bamconcordantreads', source=common_sources+bamtools_sources+sources+boost_iostreams_sources+boost_serialization_sources)
env.Install(install_dir, 'bamconcordantreads')

sources = """
    bamstats.cpp
""".split()
env.Program(target='bamstats', source=common_sources+bamtools_sources+sources)
env.Install(install_dir, 'bamstats')

sources = """
    Sequences.cpp
    samplegc.cpp
""".split()
env.Program(target='samplegc', source=common_sources+bamtools_sources+sources)
env.Install(install_dir, 'samplegc')

sources = """
    Sequences.cpp
    estimategc.cpp
""".split()
env.Program(target='estimategc', source=common_sources+bamtools_sources+sources)
env.Install(install_dir, 'estimategc')

blossom5_url = 'http://pub.ist.ac.at/~vnk/software/blossom5-v2.04.src.tar.gz'
blossom5_tar_gz = os.path.join(external_dir, 'blossom5-v2.04.src.tar.gz')
blossom5_dir = os.path.join(external_dir, 'blossom5-v2.04.src')
blossom5_bin = os.path.join(blossom5_dir, 'blossom5')

if not os.path.exists(blossom5_tar_gz):
    subprocess.check_call(['wget', '-N', '-P', external_dir, blossom5_url])

if not os.path.exists(blossom5_dir):
    subprocess.check_call(['tar', '-C', external_dir, '-xzvf', blossom5_tar_gz])

env.Command(blossom5_bin, '', ' '.join(['cd', blossom5_dir, '&&', 'make']))
env.AlwaysBuild(blossom5_bin)
env.Install(install_dir, blossom5_bin)

env.Alias('install', [install_dir])

